#!/bin/bash

set -e

POSTGRES_USER="${POSTGRES_USER:-postgres}"
POSTGRES_PASSWORD="${POSTGRES_DB:-mysecretpassword}"
POSTGRES_DB="${POSTGRES_DB:-$POSTGRES_USER}"

# Execute psql commands on the database container for performance reasons.
PSQL="gosu ${POSTGRES_USER} psql -d ${POSTGRES_DB}"
# echo "psql command: ${PSQL}"

function usage() {
    echo -n \
         "Usage: $(basename "$0") [-h] [-f]

Populate database.

Options:
    -h  Show this help text
    -f  Force data reload
"
}

function drop() {
    tablename=${1}
    echo "Dropping ${tablename}"
    ${PSQL} -c "DROP TABLE ${tablename};"
}

function table_exists() {
    table=${1}
    ${PSQL} -c "SELECT 1 FROM $table LIMIT 1" &>/dev/null
}

# Source: https://github.com/azavea/raster-foundry/blob/develop/scripts/setup#L17
function check_database() {
    echo "checking for database"
    # Check if database is set up to continue
    max=21 # 1 minute
    counter=1
    sleep 3  # wait briefly becuase it sometimes blinks out for a moment right after start-up
    while true; do
        if [[ ${counter} -gt 1 ]]; then
            echo "Checking if database is up yet (attempt ${counter})..."
        fi
        set +e
        ${PSQL} -c "SELECT 1" &>/dev/null
        status_check=$?
        if [ $status_check == 0 ]; then
            echo "database is up"
            return
        fi
        set -e
        if [[ ${counter} == "${max}" ]]; then
            echo "Could not connect to database after some time"
            exit 1
        fi
        sleep 3
        (( counter++ ))
    done
}

function check_postgis_install() {
    ${PSQL} -c "SELECT PostGIS_full_version();" &>/dev/null
    status_check=$?
    if [ $status_check == 0 ]; then
        echo "PostGIS is enabled"
        return
    fi
    echo "Enabling PostGIS"
    ${PSQL} -c "CREATE EXTENSION postgis;" &>/dev/null
}

# converts all shapefiles to sql
function process_shp() {
    for SHAPEFILE in $(find "$1" -name "*.shp")
    do
      BASENAME=$(basename $SHAPEFILE .shp)
      DIRNAME=$(dirname $SHAPEFILE)
      SQLFILE="${BASENAME}.sql"
      shp2pgsql -W UTF-8 $SHAPEFILE $BASENAME > "${1}.sql"
    done
}


# locates and unzips all zips in data
function process_zip() {
    # Generate .sql files
    zip=${1}
    echo "Loading ${zip}"
    outdir="${zip%.*}"
    echo "Attempting to extract ${zip}"
    unzip "$zip" -d "$outdir"
    process_shp "$outdir" data/
    rm -rf "$outdir"

    extracted_file="${outdir}.sql"
    ${PSQL} < "$extracted_file"
    rm "$extracted_file"
}

# unzips all .gz files
function process_gz() {
    file=${1}
    echo "Loading ${file}"
    extracted_file=${file/.gz/}
    echo "Attempting to extract $extracted_file"
    gunzip "$file" -qkf

    ${PSQL} < "$extracted_file"
    rm "$extracted_file"
}

function load() {
    if [ "${1: -3}" == ".gz" ]; then
        process_gz "${1}" "${2}"
    elif [ "${1: -4}" == ".zip" ]; then
        process_zip "${1}" "${2}"
    fi
}

function add_table() {
    if table_exists "${2}"; then\

        if [ "$force_reload" = true ]; then
            drop ${tablename}
            load "${1}" "${2}"
        else
            echo "table ${2} exists"
        fi
    else
        echo "Loading ${2}"
        load "${1}" "${2}"
    fi
}


while getopts ":hf" opt; do
    case $opt in
        h) usage; exit 0;;
        f) force_reload=true ;;
        \?) usage; exit 1;;
    esac
done
shift $(($OPTIND - 1))


check_database;
check_postgis_install;

for entry in data/*
do
    file="${entry##*/}"
    base="${file%%.*}"
    add_table "$entry" "$base"
done
