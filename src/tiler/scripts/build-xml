#!/usr/bin/env bash

set -e

# cli args
in_dir='/home/tiler/config/'
out_dir='/home/tiler/bin/config/'
s3_bucket=''

function usage() {
    echo -n "Usage: $(basename "${0}")
Transpiles a directory's worth of MML+MSS files into Tilegarden-readable XML
	!! Mount input directory to /home/tiler/config/ and output directory to /home/tiler/bin/config/ to build from external config files/build to external XML files.
Options:
    -h, --help          Display this help text
    -b, --s3_bucket <name> Uploads XML to the specified S3 bucket, instead of saving to disk (requires AWS CLI installed on your machine, uses credentials from .env)
    -e, --environment   Variably specify development/production [development|production]
    -d, --development   Template variables as development versions.
    -p, --production	Template variables as production versions.
"
    exit 0
}

function main() {
    # if s3_bucket has been set, send all files to a temporary directory
    # rather than the default out_dir
    if [ ! -z ${s3_bucket} ]; then
        out_dir=$(mktemp -d)
    fi

    # transpile files and save in the out_dir directory
    for file in $(echo "${in_dir}/*")
    do
        ext="${file##*.}"
        if [ "$ext" == "mml" ]; then
            # get output path
            filename="${file##*/}"
            base="${filename%%.*}"
            outPath="${out_dir}/${base}.xml"

            mkdir -p "${out_dir}"

            echo "Transpiling ${file} => ${outPath}"
            ./scripts/build-one-xml.sh "${in_dir}${base}.mml" > ${outPath}
        fi
    done

    # Upload files to s3 if told to
    if [ ! -z ${s3_bucket} ]; then
        if [ ! -x "$(command -v aws)" ]; then
            echo "ERROR: cannot upload to S3, AWS CLI not installed!"
            exit 1
        fi

        s3_url="s3://${s3_bucket}/"
        echo "Uploading files to ${s3_url}..."

        # Load AWS profile settings from env, if possible
        if [[ -f .env ]]; then
            export $(grep AWS_PROFILE .env) > /dev/null 2>&1
            export $(grep AWS_ACCESS_KEY_ID .env) > /dev/null 2>&1
            export $(grep AWS_SECRET_ACCESS_KEY .env) > /dev/null 2>&1
        fi

        for config in $(echo "${out_dir}/*"); do
            aws s3 cp "${config}" ${s3_url}
        done

        echo "Cleaning up ${out_dir}..."
        rm -rf ${out_dir}
    fi
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]
then
# handle command line arguments
# modified from https://stackoverflow.com/a/7069755
    while [ $# -gt 0 ]; do
        case "$1" in
            -b| --s3_bucket)
                shift
                s3_bucket=$1
                shift
                ;;
            -d| --development)
            	export NODE_ENV="development"
            	shift
            	;;
            -p| --production)
            	export NODE_ENV="production"
            	shift
            	;;
            -e| --environment)
            	shift
                export NODE_ENV=$1
                shift
                ;;
            -h| --help| *)
                usage
                ;;
        esac
    done
fi

main
